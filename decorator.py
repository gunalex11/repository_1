def repeat(n): # "обёртка" для декоратора, позволяющая получить n
    def decorator(taken_func): # декоратор для наших функций
        def wrapper(a): # "обёртка" для функции, выполняющая её n раз
            for i in range(n):
                a = taken_func(a)
            return a # отбираем хлеб у декорируемых функций
        return wrapper # подставляем вместо декорируемой функции эту, "поддельную", которая уже выполняет то, что нам нужно
    return decorator # подставляем декоратор туда, откуда была вызвала "обёртка" для него: таким образом, декоратор там, где и должен был быть, но при этом он получил n

@repeat(2)
def plus_1(x):
    return x + 1


@repeat(0)
def mul_2(x):
    return x * 2


print(plus_1(3))  # должно выдать 5
print(mul_2(4))  # должно выдать 4
